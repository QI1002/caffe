1. build preparation

cat /proc/cpuinfo
sudo apt-get install cmake
sudo apt-get install autoconf automake libtool curl make g++ unzip git
sudo apt-get install libboost-all-dev
sudo apt-get install gfortran

=======================================================================================================================================

2. download packages 

A. get caffe and put packages in caffe/lib & caffe/lib/archive 
https://github.com/BVLC/caffe/releases
https://github.com/BVLC/caffe/archive/rc3.tar.gz

B. download boost and build it or use apt-get to install 
sudo apt-get install libboost-all-dev
http://www.boost.org/users/history/version_1_60_0.html
./bootstrap.sh
./b2 

C. download protobuf and build it  
https://github.com/google/protobuf/releases
https://github.com/protocolbuffers/protobuf/archive/v3.0.0.tar.gz
edit ./autogen.sh 
  curl $curlopts -O https://src.fedoraproject.org/repo/pkgs/gmock/gmock-1.7.0.zip/073b984d8798ea1594f5e44d85b20d66/gmock-1.7.0.zip
./autogen.sh
./configure
make

D. download gflags and build it 
https://github.com/gflags/gflags/releases
https://github.com/gflags/gflags/archive/v2.1.2.tar.gz
mkdir build && cd build
cmake ..
modify /home/qi/dnn/caffe/gflags-2.1.2/build/CMakeFiles/gflags-static.dir/flags.make to add "-fPIC"
make

E. download glog and build it 
https://github.com/google/glog/releases
https://github.com/google/glog/archive/v0.3.4.tar.gz
./configure && make

F. download leveldb and build 
https://github.com/google/leveldb/releases
https://github.com/google/leveldb/archive/v1.19.tar.gz
make

G. download lmdb and build it 
https://github.com/LMDB/lmdb/releases
https://github.com/LMDB/lmdb/archive/LMDB_0.9.18.tar.gz
cd libraries/liblmdb && make

H. download snappy and build it 
https://github.com/google/snappy/releases
https://github.com/google/snappy/archive/1.1.3.tar.gz
./autogen.sh
./configure
make

I. download hdf5 and build it or apt-get to install   
#sudo apt-get install libhdf5-dev
https://www.hdfgroup.org/HDF5/release/obtainsrc.html
https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.4/src/hdf5-1.10.4.tar.bz2
mkdir install 
./configure --enable-cxx --enable-fortran --prefix=/home/qi/github/caffe/lib/hdf5-1.10.4/install
make -j8 install
#mkdir install && make build && cd build
#cmake -DCMAKE_INSTALL_PREFIX=../install -DHDF5_BUILD_FORTRAN=ON ..
#make install
#-DHDF5_FIND_DEBUG=ON -DCPU_ONLY=ON ..

J. download atlas and build it  
https://sourceforge.net/projects/math-atlas/files/
https://sourceforge.net/projects/math-atlas/files/Stable/3.10.3/atlas3.10.3.tar.bz2/download
mkdir build && cd build
../configure -Fa alg -fPIC --cripple-atlas-performance
make -j8

K. download openCV or use github opencv sharing
https://github.com/Itseez/opencv/archive/2.4.13.zip
mkdir build && cd build
cmake -D CMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=../install -DWITH_CUDA=OFF ..
make -j8 install

L. appendix 
https://github.com/xianyi/OpenBLAS/wiki/User-Manual
OpenBLAS-0.2.18.tar.gz
make

modify ./modules/core/include/opencv2/core/core.hpp as follows:

#ifdef FLOAT
#undef FLOAT
#endif
class CV_EXPORTS_W_SIMPLE FileNode
{

due to OpenBLAS cblas.h define FLOAT to float 

=======================================================================================================================================

3. the command how to make caffe 

A. environment setup
#export PATH=$PATH:/home/qi/github/caffe/lib/hdf5-1.8.17/hdf5
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/qi/github/caffe/lib/protobuf-3.0.0/src/.libs

#modify CMakefiles => link_directories($(PROTOBUF_INCLUDE_DIR)/.libs)

B. caffe with boost1.60.0 & openBLAS-0.2.18 
cmake -DPROTOBUF_INCLUDE_DIR=/home/qi/dnn/caffe/protobuf-3.0.0/src -DPROTOBUF_LIBRARY=/home/qi/dnn/caffe/protobuf-3.0.0/src/.libs/libprotobuf.so -DPROTOBUF_PROTOC_EXECUTABLE=/home/qi/dnn/caffe/protobuf-3.0.0/src/.libs/protoc -DGFLAGS_INCLUDE_DIR=/home/qi/dnn/caffe/gflags-2.1.2/build/include -DGFLAGS_LIBRARY=/home/qi/dnn/caffe/gflags-2.1.2/build/lib/libgflags.a -DGLOG_INCLUDE_DIR=/home/qi/dnn/caffe/glog-0.3.4/src -DGLOG_LIBRARY=/home/qi/dnn/caffe/glog-0.3.4/.libs/libglog.so -DLMDB_INCLUDE_DIR=/home/qi/dnn/caffe/lmdb-LMDB_0.9.18/libraries/liblmdb -DLMDB_LIBRARIES=/home/qi/dnn/caffe/lmdb-LMDB_0.9.18/libraries/liblmdb/liblmdb.so -DLevelDB_INCLUDE=/home/qi/dnn/caffe/leveldb-1.19/include -DLevelDB_LIBRARY=/home/qi/dnn/caffe/leveldb-1.19/out-shared/libleveldb.so -DSnappy_INCLUDE_DIR=/home/qi/dnn/caffe/snappy-1.1.3 -DSnappy_LIBRARIES=/home/qi/dnn/caffe/snappy-1.1.3/.libs/libsnappy.so -DOpenCV_DIR=/home/qi/dnn/caffe/opencv-2.4.13/build .. -DBLAS=Open -DOpenBLAS_INCLUDE_DIR=/home/qi/dnn/caffe/OpenBLAS-0.2.18 -DOpenBLAS_LIB=/home/qi/dnn/caffe/OpenBLAS-0.2.18/libopenblas.so -DBOOST_ROOT=/home/qi/dnn/caffe/boost_1_60_0 -DCMAKE_BUILD_TYPE=Debug -DCPU_ONLY=ON ..
  
C. caffe with opencv-2.4.13.6 and hdf5-1.10.4
cmake -DPROTOBUF_INCLUDE_DIR=/home/qi/github/caffe/lib/protobuf-3.0.0/src -DPROTOBUF_LIBRARY=/home/qi/github/caffe/lib/protobuf-3.0.0/src/.libs/libprotobuf.so -DPROTOBUF_PROTOC_EXECUTABLE=/home/qi/github/caffe/lib/protobuf-3.0.0/src/.libs/protoc -DGFLAGS_INCLUDE_DIR=/home/qi/github/caffe/lib/gflags-2.1.2/build/include -DGFLAGS_LIBRARY=/home/qi/github/caffe/lib/gflags-2.1.2/build/lib/libgflags.a -DGLOG_INCLUDE_DIR=/home/qi/github/caffe/lib/glog-0.3.4/src -DGLOG_LIBRARY=/home/qi/github/caffe/lib/glog-0.3.4/.libs/libglog.so -DLMDB_INCLUDE_DIR=/home/qi/github/caffe/lib/lmdb-LMDB_0.9.18/libraries/liblmdb -DLMDB_LIBRARIES=/home/qi/github/caffe/lib/lmdb-LMDB_0.9.18/libraries/liblmdb/liblmdb.so -DLevelDB_INCLUDE=/home/qi/github/caffe/lib/leveldb-1.19/include -DLevelDB_LIBRARY=/home/qi/github/caffe/lib/leveldb-1.19/out-shared/libleveldb.so -DSnappy_INCLUDE_DIR=/home/qi/github/caffe/lib/snappy-1.1.3 -DSnappy_LIBRARIES=/home/qi/github/caffe/lib/snappy-1.1.3/.libs/libsnappy.so -DOpenCV_DIR=/home/qi/github/library/opencv-2.4.13.6/build -DAtlas_CBLAS_INCLUDE_DIR=/home/qi/github/caffe/lib/ATLAS/include -DAtlas_CLAPACK_INCLUDE_DIR=/home/qi/github/caffe/lib/ATLAS/include -DAtlas_CBLAS_LIBRARY=/home/qi/github/caffe/lib/ATLAS/build/lib/libcblas.a -DAtlas_BLAS_LIBRARY=/home/qi/github/caffe/lib/ATLAS/build/lib/libatlas.a -DAtlas_LAPACK_LIBRARY=/home/qi/github/caffe/lib/ATLAS/build/lib/liblapack.a -DHDF5_ROOT=/home/qi/github/caffe/lib/hdf5-1.10.4/install -DCMAKE_BUILD_TYPE=Debug -DCPU_ONLY=ON ..

D. build caffe   
check if -DWITH_PYTHON_LAYER to build by "make VERBOSE=1"
check if there is pycaffe target in Makefile  
make -j8
make runtest
WITH_PYTHON_LAYER=1 make && make pycaffe 

=======================================================================================================================================

4. the command to build python environment in caffe 

A. protobuf python build 
cd /home/qi/github/caffe/lib/protobuf-3.0.0/python 
python setup.py build
goto protobuf/python folder => python setup.py build
   
B. caffe python build 
cd /home/qi/github/caffe/build
make pycaffe
or 
WITH_PYTHON_LAYER=1 make && make pycaffe 

C. install python package 
sudo apt-get install python-pip
sudo pip install scikit-image
sudo pip install numpy
sudo apt-get install python-pandas
sudo apt-get install graphviz
#sudo pip install pandas
sudo pip install pydotplus

sudo pip install h5py
sudo pip install sklearn

D. set python path or patch for access caffe & protobuf python 
source python/env.sh 

=======================================================================================================================================

5. the test command 

A. alexnet, googlenet and caffenet test commands 
./build/examples/cpp_classification/classification-d models/bvlc_alexnet/deploy.prototxt models/bvlc_alexnet/bvlc_alexnet.caffemodel data/ilsvrc12/imagenet_mean.binaryproto data/ilsvrc12/synset_words.txt examples/images/cat.jpg

./build/examples/cpp_classification/classification-d models/bvlc_googlenet/deploy.prototxt models/bvlc_googlenet/bvlc_googlenet.caffemodel data/ilsvrc12/imagenet_mean.binaryproto data/ilsvrc12/synset_words.txt examples/images/cat.jpg

./build/examples/cpp_classification/classification-d models/bvlc_reference_caffenet/deploy.prototxt models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel data/ilsvrc12/imagenet_mean.binaryproto data/ilsvrc12/synset_words.txt examples/images/cat.jpg

=======================================================================================================================================

6. caffe reference links 

A. data folder 
:~/github/caffe/data/flickr_style$ python ../../examples/finetune_flickr_style/assemble_data.py --workers=-1 --images=2000 --seed 831486

A. more examples 
https://github.com/shelhamer/fcn.berkeleyvision.org
https://github.com/twtygqyy/obg_fcn
https://github.com/LisaAnne/lisa-caffe-public
https://github.com/KaimingHe/deep-residual-networks
https://github.com/weiliu89/caffe/tree/ssd
https://github.com/mustafaIhssan/Deep-learning-Image-Classification-Caffe

https://github.com/rbgirshick/rcnn
https://github.com/rbgirshick/fast-rcnn
https://github.com/rbgirshick/caffe-fast-rcnn
https://github.com/rbgirshick/py-faster-rcnn
https://github.com/ShaoqingRen/faster_rcnn

https://github.com/mnielsen/neural-networks-and-deep-learning
https://github.com/amd/OpenCL-caffe
https://github.com/intel/caffe/tree/1.1.0

https://github.com/BVLC/caffe/wiki/Model-Zoo

cmake -DPROTOBUF_INCLUDE_DIR=/home/qi/github/caffe/lib/protobuf-3.0.0/src 
      -DPROTOBUF_LIBRARY=/home/qi/github/caffe/lib/protobuf-3.0.0/src/.libs/libprotobuf.so 
      -DPROTOBUF_PROTOC_EXECUTABLE=/home/qi/github/caffe/lib/protobuf-3.0.0/src/.libs/protoc 
      -DGFLAGS_INCLUDE_DIR=/home/qi/github/caffe/lib/gflags-2.1.2/build/include 
      -DGFLAGS_LIBRARY=/home/qi/github/caffe/lib/gflags-2.1.2/build/lib/libgflags.a 
      -DGLOG_INCLUDE_DIR=/home/qi/github/caffe/lib/glog-0.3.4/src 
      -DGLOG_LIBRARY=/home/qi/github/caffe/lib/glog-0.3.4/.libs/libglog.so 
      -DLMDB_INCLUDE_DIR=/home/qi/github/caffe/lib/lmdb-LMDB_0.9.18/libraries/liblmdb 
      -DLMDB_LIBRARIES=/home/qi/github/caffe/lib/lmdb-LMDB_0.9.18/libraries/liblmdb/liblmdb.so 
      -DLevelDB_INCLUDE=/home/qi/github/caffe/lib/leveldb-1.19/include 
      -DLevelDB_LIBRARY=/home/qi/github/caffe/lib/leveldb-1.19/out-shared/libleveldb.so 
      -DSnappy_INCLUDE_DIR=/home/qi/github/caffe/lib/snappy-1.1.3 
      -DSnappy_LIBRARIES=/home/qi/github/caffe/lib/snappy-1.1.3/.libs/libsnappy.so 
      -DOpenCV_DIR=/home/qi/github/library/opencv-2.4.13.6/build 
      -DAtlas_CBLAS_INCLUDE_DIR=/home/qi/github/caffe/lib/ATLAS/include 
      -DAtlas_CLAPACK_INCLUDE_DIR=/home/qi/github/caffe/lib/ATLAS/include 
      -DAtlas_CBLAS_LIBRARY=/home/qi/github/caffe/lib/ATLAS/build/lib/libcblas.a 
      -DAtlas_BLAS_LIBRARY=/home/qi/github/caffe/lib/ATLAS/build/lib/libatlas.a 
      -DAtlas_LAPACK_LIBRARY=/home/qi/github/caffe/lib/ATLAS/build/lib/liblapack.a 
      -DHDF5_ROOT=/home/qi/github/caffe/lib/hdf5-1.10.4/install 
      -DCMAKE_BUILD_TYPE=Debug 
      -DCPU_ONLY=ON ..

=======================================================================================================================================

7. notebook study (0. related *.ipynb 1. prebuilt steps 2. log dir 3. run test 4. study )

A. 00-classification.ipynb
>> ./img_show.py           	: use pyplot to show image file 
>> ./img_classification.py 	: use caffenet to classify, and display image, 36x11x11x3 conv1 image from 96x3x11x11 weight, 
                                    36x55x55 conv1 blob image from 96x55x55, 256x6x6 pool5 blob image and 1x4096 fc6 blob image and 
                                    it's histgram except 0 and finally softmax 1x1000 probility image 
TODO: how to change the function vis_square to show 12x8 for 96x11x11x3 images  
  
B. 01-learning-lenet.ipynb 
./examples/mnist/create_mnist.sh 
./examples/mnist/train_lenet.sh 
>> ./lenet.py			: study TODO, just show conv parameter ? 
>> ./lenet-train.py	  	: study TODO, train or use solver to detect ? the traning diagram of it is not obvious  

C. mnist/mnist_siamese.ipynb
./examples/siamese/create_mnist_siamese.sh 
./examples/siamese/train_mnist_siamese.sh 
>> ./siamese.py 		: study TODO

D. brewing-logreg.ipynb
./build/tools/caffe-d train -solver examples/hdf5_classification/logreg_solver.prototxt
./build/tools/caffe-d train -solver examples/hdf5_classification/nonlinear_logreg_solver.prototxt
>> ./off-the-shelf-sgd1.py 	: study TODO
>> ./off-the-shelf-sgd2.py 	: study TOTO

E. net_surgery.ipynb            
>> ./caffenet_full_conv.py 	: study TOTO
>> ./net_surgery.py        	: study TOTO, show the cat and filter 
 
F. 02-fine-tuning.ipynb
python examples/finetune_flickr_style/assemble_data.py --workers=-1 --seed=1701 --images=2000 --label=5
>> ./style_recognition.py       : study TODO
>> ./style_recognition_train.py	: study TODO

G. pascal-multilabel-with-datalayer.ipynb
>> ./pascal.py      		: study TOTO
>> ./pascal-train.py    	: study TOTO

H. detection.ipynb
mkdir rcnn_temp && echo ../images/fish-bike.jpg > _temp/det_input.txt
python ../../python/detect.py --crop_mode=selective_search --pretrained_model=../../models/bvlc_reference_rcnn_ilsvrc13/bvlc_reference_rcnn_ilsvrc13.caffemodel --model_def=../../models/bvlc_reference_rcnn_ilsvrc13/deploy.prototxt --raw_scale=255 rcnn_temp/det_input.txt _temp/det_output.h5
>> python ./rcnn.py      	: study TOTO, show 3 times rcnn result

TODO: check log error or warning 
